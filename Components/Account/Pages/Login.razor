@page "/Account/Login"
@attribute [AllowAnonymous]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Burg_Storage.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<HeadContent>
    <link href="login.css" rel="stylesheet" />
</HeadContent>

<div class="login-background">
    <div class="login-card">
        <div class="crest">
            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="#bf8c2f" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M5.072.043A.5.5 0 0 0 4.6.2L3.61 1.391c-.42.56-1.252.92-2.132.92A.5.5 0 0 0 1 2.811V6c0 5.356 3.28 8.61 6.548 9.727a.5.5 0 0 0 .364 0C11.28 14.61 14.56 11.356 14.56 6V2.811a.5.5 0 0 0-.478-.5c-.88 0-1.713-.36-2.132-.92L10.928.2a.5.5 0 0 0-.472-.157 15.55 15.55 0 0 1-5.384 0z" />
            </svg>
        </div>
        <h1 class="title">Burgverein Cloud</h1>
        <p class="subtitle">Stauferlager Burgverein e.V.</p>
        <p class="intro">Willkommen im digitalen Burghof – hier verwaltest du deine Dokumente.</p>
        <StatusMessage Message="@errorMessage" />

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3 text-start">
                <label for="email" class="form-label">Benutzername</label>
                <InputText id="email" @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="mb-3 text-start">
                <label for="password" class="form-label">Passwort</label>
                <InputText id="password" type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-check mb-3 text-start">
                <InputCheckbox id="rememberMe" @bind-Value="Input.RememberMe" class="form-check-input" />
                <label class="form-check-label" for="rememberMe">Angemeldet bleiben</label>
            </div>

            <button type="submit" class="btn btn-primary w-100">Anmelden</button>

            <div class="mt-3">
                <a href="Account/ForgotPassword">Passwort vergessen?</a>
            </div>
        </EditForm>

        <div class="tips text-start mt-4">
            <ul>
                <li>Geben Sie Ihren Benutzernamen und Ihr Passwort ein.</li>
                <li>Der Zugangskanal wird verschlüsselt übertragen.</li>
                <li>Dokumente werden in die Cloud hochgeladen.</li>
            </ul>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
